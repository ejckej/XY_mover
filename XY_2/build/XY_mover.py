
"""
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
"""

"""
# Compiling app: 
    Mac (py2app):
        https://py2app.readthedocs.io/en/latest/tutorial.html#create-a-setup-py-file 
        TERMINAL:
            py2applet --make-setup LED-test.py
            rm -rf build dist
            python setup.py py2app
    # Windows (pyinstaller):
        https://pyinstaller.org/en/stable/ 
        TERMINAL: 
            pyinstaller -F LED-test.py
"""

from pathlib import Path
from tkinter import *
import serial
import time

test_mode = TRUE # FALSE #

x_max = 100
y_max = 100
speed_list = [1, 5, 10]

x = 0
y = 0
step_size = 0.92
step = step_size
saved_positions = list()
saved_positions.append([x, y])

print("Reset Arduino")
time.sleep(3)
ser = serial.Serial()

if not(test_mode):
    ser.baudrate = 9600
    ser.port = "/dev/cu.usbmodem14101"
    try: 
        ser.open()
    except:
        print ("Error opening serial port.")
        from tkinter import messagebox
        messagebox.showerror("ERROR", "Arduino not connected!\nLaunching in Test mode.")
        test_mode = TRUE

def main_window():
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r"/Users/jankeil/Documents/Arduino/XY_2/build/assets/frame0")

    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    def on_closing():
      window.destroy()
      ser.close()
      exit
    
    # default point position: x=313.0, y=280.0
    table_size = 93
    def get_speed():
        global step
        sp = slider.get()
        current_speed = speed_list[sp-1]
        step = step_size*current_speed
        return current_speed

    # ser gets the x,y vaalues not the differences

    def set_b_right_action(event=NONE):
        global x
        get_speed()
        #print("button_right clicked")
        if x+step <= x_max:
            x += get_speed()
            canvas.move(point, step, 0)
        else:
            print("Max X!")
            canvas.moveto(point, x=313+table_size)
            x = x_max
        x_label.set("X = " + str(x))
        #print("X "+str(x))
        if not(test_mode):
            ser.write(bytes('A', 'UTF-8'))
            ser.write("X "+str(x))

    def set_b_left_action(event=NONE):
        global x
        get_speed()
        #print("button_left clicked")
        if x-step >= 0:
            x -= get_speed()
            canvas.move(point, -step, 0)
        else:
            print("Min X!")
            canvas.moveto(point, x=313)
            x = 0
        x_label.set("X = " + str(x))
        if not(test_mode):
            ser.write(bytes('B', 'UTF-8'))
            ser.write("X "+str(x))

    def set_b_down_action(event=NONE):
        global y
        get_speed()
        #print("button_down clicked")
        if y+step <= x_max:
            y += get_speed()
            y_label.set("Y = " + str(y))
            canvas.move(point, 0, step)
        else:
            print("Max Y!")
            canvas.moveto(point, y=280+table_size)
            y = y_max
        y_label.set("Y = " + str(y))
        if not(test_mode):
            ser.write(bytes('L', 'UTF-8'))
            ser.write("Y "+str(y))

    def set_b_up_action(event=NONE):
        global y
        get_speed()
        #print("button_up clicked")
        if y-step >= 0:
            y -= get_speed()
            canvas.move(point, 0, -step)
        else:
            print("Min Y!")
            canvas.moveto(point, y=280)
            y = 0
        y_label.set("Y = " + str(y))
        if not(test_mode):
            ser.write(bytes('H', 'UTF-8'))
            ser.write("Y "+str(y))

    def set_b_save_action():
        #print("Save button clicked.")
        #print("Current (X,Y) coordinates: (" + str(x) + "," + str(y)+ ")")
        if not([x,y] in saved_positions):
            saved_positions.append([x, y])
            #print(saved_positions)
            listbox.insert(END, str(len(saved_positions))+": " + str(saved_positions[-1]))

    def set_b_get_action():
        #print("Goto button clicked.")
        if listbox.curselection() :
            ind = int(list(listbox.curselection())[0])
            current_selection = saved_positions[ind]
            #print(current_selection)
            global x
            global y
            x = current_selection[0]
            y = current_selection[1]

            ## update GUI elements
            x_label.set("X = " + str(x))
            y_label.set("X = " + str(y))
            canvas.moveto(point, x=313.0+(x*0.93), y=280.0+(y*0.93))
        else:
            print("Nothing selected!")

    def set_b_delete_action():
        if listbox.curselection():
            sel_idx = listbox.curselection()[0]
            listbox.delete(sel_idx)
            del(saved_positions[sel_idx])
            #print(saved_positions)

            # TODO: update listbox indexes
            listbox.delete(0, END)
            i = 1
            for p in saved_positions:
                listbox.insert(END, str(i)+": " + str(p))
                i += 1
            #listbox.insert(END, str(len(saved_positions))+": " + str(saved_positions[-1]))

    window = Tk()
    window.title("XY-mover")
    window.geometry("978x425")
    window.configure(bg = "#FFFFFF")
    window.protocol("WM_DELETE_WINDOW", on_closing)
    window.resizable(False, False)
    window.bind("<Up>", set_b_up_action) #lambda x: print("You pressed up"))
    window.bind("<Down>", set_b_down_action) #lambda x: print("You pressed down"))
    window.bind("<Left>", set_b_left_action) #lambda x: print("You pressed left"))
    window.bind("<Right>", set_b_right_action) #lambda x: print("You pressed right"))

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 425,
        width = 978,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )
    canvas.place(x = 0, y = 0)

    #lightblue main
    canvas.create_rectangle(
        13.0,
        11.0,
        478.0,
        413.0,
        fill="#92B3DB",
        outline="")

    #### ARROW BUTTONS ####
    button_image_left = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_left = Button(
        image=button_image_left,
        borderwidth=0,
        highlightthickness=0,
        command=set_b_left_action,
        relief="flat"
    )
    button_left.place(
        x=174.0,
        y=79.0,
        width=60.0,
        height=65.0
    )

    button_image_down = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_down = Button(
        image=button_image_down,
        borderwidth=0,
        highlightthickness=0,
        command=set_b_down_action,
        relief="flat"
    )
    button_down.place(
        x=222.0,
        y=128.0,
        width=65.0,
        height=60.0
    )

    button_image_right = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_right = Button(
        image=button_image_right,
        borderwidth=0,
        highlightthickness=0,
        command=set_b_right_action,
        relief="flat"
    )
    button_right.place(
        x=270.0,
        y=78.0,
        width=60.0,
        height=65.0
    )

    button_image_up = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_up = Button(
        image=button_image_up,
        borderwidth=0,
        highlightthickness=0,
        command=set_b_up_action,
        relief="flat"
    )
    button_up.place(
        x=220.0,
        y=37.0,
        width=65.0,
        height=60.0
    )
    #### ARROW BUTTONS - END ####

    canvas.create_text(
        160.0,
        220.0,
        anchor="nw",
        text="Speed:",
        fill="#000000",
        font=("Inter", 14 * -1)
    )

    slider = Scale(window, from_=1, to=3, orient=HORIZONTAL)
    slider.configure(background="#92B3DB")
    slider.place(
        x=225.0,
        y=200.0,
        width=109
    )

    # line
    canvas.create_rectangle(
        13.0,
        248.0,
        478.0,
        250.0,
        fill="#275284",
        outline=""
    )

    mv = 30

    # pos_rectangle
    canvas.create_rectangle(
        53.0,
        235.0 + mv,
        438.0,
        367.0 + mv,
        fill="#7195C0",
        outline="")

    canvas.create_text(
        75.0,
        247.0 + mv,
        anchor="nw",
        text="Current position:",
        fill="#000000",
        font=("TimesNewRomanPSMT", 20 * -1)
    )

    x_text = canvas.create_text(
        114.0,
        301.0 + mv,
        anchor="nw",
        text="X = 0",
        fill="#000000",
        font=("TimesNewRomanPSMT", 16 * -1)
    )
    def xlab_on_change(varname, index, mode):
        canvas.itemconfigure(x_text, text=window.getvar(varname))
    x_label = StringVar(window)
    x_label.set("X = " + str(x))
    x_label.trace_add('write', xlab_on_change)

    y_text = canvas.create_text(
        213.0,
        301.0 + mv,
        anchor="nw",
        text="Y = 0",
        fill="#000000",
        font=("TimesNewRomanPSMT", 16 * -1)
    )
    def ylab_on_change(varname, index, mode):
        canvas.itemconfigure(y_text, text=window.getvar(varname))
    y_label = StringVar(window)
    y_label.set("Y = " + str(y))
    y_label.trace_add('write', ylab_on_change)

    # table rectangle
    canvas.create_rectangle(
        310.0,
        247.0 + mv,
        419.0,
        356.0 + mv,
        fill="#4971A1",
        outline="#275284")

    # point
    image_point = PhotoImage(
        file=relative_to_assets("image_1.png"))
    point = canvas.create_image(
        319.0,
        256.0 + mv,
        image=image_point
    )

    ################################### Right half ###################################
    #grey main
    """
    canvas.create_rectangle(
        499.0,
        11.0,
        964.0,
        413.0,
        fill="#E6E6E6",
        outline="")
    """

    #button_image_save = PhotoImage(file=relative_to_assets("button_5.png"))
    button_savepoint = Button(
        #image=button_image_save,
        text="Save point",
        borderwidth=0,
        highlightthickness=0,
        command=set_b_save_action,
        relief="flat"
    )
    button_savepoint.place(
        x=545.0,
        y=44.0,
        width=100.0,
        height=35.0
    )

    button_delpoint = Button(
        text="Delete point",
        borderwidth=0,
        highlightthickness=0,
        command=set_b_delete_action,
        relief="flat"
    )
    button_delpoint.place(
        x=660.0,
        y=44.0,
        width=100.0,
        height=35.0
    )

    #button_image_getpoint = PhotoImage(file=relative_to_assets("button_6.png"))
    button_getpoint = Button(
        #image=button_image_getpoint,
        text="Go to point",
        borderwidth=0,
        highlightthickness=0,
        command=set_b_get_action,
        relief="flat"
    )
    button_getpoint.place(
        x=830.0,
        y=44.0,
        width=100.0,
        height=35.0
    )

    canvas.create_text(
        545.0,
        97.0,
        anchor="nw",
        text="Saved positions:",
        fill="#000000",
        font=("Inter", 14 * -1)
    )

    #List rectangle
    canvas.create_rectangle(
        545.0,
        117.0,
        930.0,
        367.0,
        fill="#F5F5F5",
        outline="")

    scrollbar = Scrollbar(window)
    listbox = Listbox(window, selectmode=SINGLE, takefocus=FALSE)
    listbox.config(yscrollcommand = scrollbar.set)
    scrollbar.config(command = listbox.yview)
    listbox.insert(END, str(len(saved_positions))+": " + str(saved_positions[-1]))
    listbox.select_set(0)
    listbox.place(
        x=555.0,
        y=127.0,
        width=361.0,
        height=230.0
    )
    scrollbar.place(
        in_=listbox, 
        relx=1.0, 
        relheight=1.0, 
        bordermode="inside"
    )
    window.mainloop()

main_window()
